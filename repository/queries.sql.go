// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package repository

import (
	"context"
	"time"
)

const bringActiveBorrowByUser = `-- name: BringActiveBorrowByUser :one
SELECT id, user_id, book_id, date, status FROM user_books ub
WHERE ub.user_id=$1 and ub.status=$2 LIMIT 1
`

type BringActiveBorrowByUserParams struct {
	UserID int32  `json:"user_id"`
	Status string `json:"status"`
}

func (q *Queries) BringActiveBorrowByUser(ctx context.Context, arg BringActiveBorrowByUserParams) (UserBook, error) {
	row := q.db.QueryRowContext(ctx, bringActiveBorrowByUser, arg.UserID, arg.Status)
	var i UserBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Date,
		&i.Status,
	)
	return i, err
}

const bringBorrowedByBookId = `-- name: BringBorrowedByBookId :many
SELECT ub.id,u.username,b.name,ub.date,ub.status FROM user_books ub
INNER JOIN users u ON ub.user_id=u.id
INNER JOIN books b ON ub.book_id=b.id
WHERE ub.book_id = $1
`

type BringBorrowedByBookIdRow struct {
	ID       int32     `json:"id"`
	Username string    `json:"username"`
	Name     string    `json:"name"`
	Date     time.Time `json:"date"`
	Status   string    `json:"status"`
}

func (q *Queries) BringBorrowedByBookId(ctx context.Context, bookID int32) ([]BringBorrowedByBookIdRow, error) {
	rows, err := q.db.QueryContext(ctx, bringBorrowedByBookId, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BringBorrowedByBookIdRow
	for rows.Next() {
		var i BringBorrowedByBookIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Date,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const bringBorrowedById = `-- name: BringBorrowedById :one
SELECT id, user_id, book_id, date, status FROM user_books ub
WHERE ub.id=$1 LIMIT 1
`

func (q *Queries) BringBorrowedById(ctx context.Context, id int32) (UserBook, error) {
	row := q.db.QueryRowContext(ctx, bringBorrowedById, id)
	var i UserBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Date,
		&i.Status,
	)
	return i, err
}

const bringBorrowedByUserName = `-- name: BringBorrowedByUserName :many

SELECT ub.id,u.username,b.name,ub.date,ub.status FROM user_books ub 
INNER JOIN users u ON ub.user_id=u.id
INNER JOIN books b ON ub.book_id=b.id
WHERE u.username = $1
`

type BringBorrowedByUserNameRow struct {
	ID       int32     `json:"id"`
	Username string    `json:"username"`
	Name     string    `json:"name"`
	Date     time.Time `json:"date"`
	Status   string    `json:"status"`
}

// -
func (q *Queries) BringBorrowedByUserName(ctx context.Context, username string) ([]BringBorrowedByUserNameRow, error) {
	rows, err := q.db.QueryContext(ctx, bringBorrowedByUserName, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BringBorrowedByUserNameRow
	for rows.Next() {
		var i BringBorrowedByUserNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Date,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const checkUser = `-- name: CheckUser :one
SELECT id, username, password, role FROM users
WHERE username = $1 and password = $2 LIMIT 1
`

type CheckUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CheckUser(ctx context.Context, arg CheckUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, checkUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  name, author
) VALUES (
  $1, $2
)
RETURNING id, name, author
`

type CreateBookParams struct {
	Name   string `json:"name"`
	Author string `json:"author"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Name, arg.Author)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.Author)
	return i, err
}

const createBorrow = `-- name: CreateBorrow :one
INSERT INTO user_books (
  user_id, book_id, date, status
) 
SELECT 
  $1, $2, NOW(), $3
WHERE EXISTS (
  SELECT 1 FROM books WHERE id = $2
) AND EXISTS (
  SELECT 1 FROM users WHERE id = $1
)
RETURNING id, user_id, book_id, date, status
`

type CreateBorrowParams struct {
	UserID int32  `json:"user_id"`
	BookID int32  `json:"book_id"`
	Status string `json:"status"`
}

func (q *Queries) CreateBorrow(ctx context.Context, arg CreateBorrowParams) (UserBook, error) {
	row := q.db.QueryRowContext(ctx, createBorrow, arg.UserID, arg.BookID, arg.Status)
	var i UserBook
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Date,
		&i.Status,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,password, role
) VALUES (
  $1, $2, $3
)
RETURNING id, username, password, role
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const deleteBorrow = `-- name: DeleteBorrow :exec
DELETE FROM user_books
WHERE id = $1
`

func (q *Queries) DeleteBorrow(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBorrow, id)
	return err
}

const deleteBorrowByBookId = `-- name: DeleteBorrowByBookId :exec
DELETE FROM user_books
WHERE book_id = $1
`

func (q *Queries) DeleteBorrowByBookId(ctx context.Context, bookID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBorrowByBookId, bookID)
	return err
}

const deleteBorrowByUserId = `-- name: DeleteBorrowByUserId :exec
DELETE FROM user_books
WHERE user_id = $1
`

func (q *Queries) DeleteBorrowByUserId(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteBorrowByUserId, userID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, name, author FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int32) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(&i.ID, &i.Name, &i.Author)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, role FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, name, author FROM books
ORDER BY name
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(&i.ID, &i.Name, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBorrow = `-- name: ListBorrow :many
SELECT ub.id,u.username,b.name,ub.date,ub.status FROM user_books ub
INNER JOIN users u ON ub.user_id=u.id
INNER JOIN books b ON ub.book_id=b.id
`

type ListBorrowRow struct {
	ID       int32     `json:"id"`
	Username string    `json:"username"`
	Name     string    `json:"name"`
	Date     time.Time `json:"date"`
	Status   string    `json:"status"`
}

func (q *Queries) ListBorrow(ctx context.Context) ([]ListBorrowRow, error) {
	rows, err := q.db.QueryContext(ctx, listBorrow)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBorrowRow
	for rows.Next() {
		var i ListBorrowRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Date,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUser = `-- name: ListUser :many
SELECT id, username, password, role FROM users
ORDER BY username
`

func (q *Queries) ListUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tooLateBringBorrowed = `-- name: TooLateBringBorrowed :many
SELECT ub.id,u.username, b.name, ub.date,ub.status
FROM user_books ub
INNER JOIN users u ON ub.user_id=u.id
INNER JOIN books b ON ub.book_id=b.id
WHERE NOW() >= date + INTERVAL '7 days' and status = $1
`

type TooLateBringBorrowedRow struct {
	ID       int32     `json:"id"`
	Username string    `json:"username"`
	Name     string    `json:"name"`
	Date     time.Time `json:"date"`
	Status   string    `json:"status"`
}

func (q *Queries) TooLateBringBorrowed(ctx context.Context, status string) ([]TooLateBringBorrowedRow, error) {
	rows, err := q.db.QueryContext(ctx, tooLateBringBorrowed, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TooLateBringBorrowedRow
	for rows.Next() {
		var i TooLateBringBorrowedRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Date,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :exec
UPDATE books
  set name = $2,
  author = $3
WHERE id = $1
`

type UpdateBookParams struct {
	ID     int32  `json:"id"`
	Name   string `json:"name"`
	Author string `json:"author"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) error {
	_, err := q.db.ExecContext(ctx, updateBook, arg.ID, arg.Name, arg.Author)
	return err
}

const updateStatusBorrow = `-- name: UpdateStatusBorrow :exec
UPDATE user_books
set status = false
WHERE id = $1
`

func (q *Queries) UpdateStatusBorrow(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateStatusBorrow, id)
	return err
}
